// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p2pnet.proto

#ifndef PROTOBUF_p2pnet_2eproto__INCLUDED
#define PROTOBUF_p2pnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace p2pnetS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_p2pnet_2eproto();
void protobuf_AssignDesc_p2pnet_2eproto();
void protobuf_ShutdownFile_p2pnet_2eproto();

class Request;

enum Request_RequestType {
  Request_RequestType_NewIndexRequest = 0,
  Request_RequestType_AddRequest = 1,
  Request_RequestType_SendRequest = 2,
  Request_RequestType_RecvRequest = 3
};
bool Request_RequestType_IsValid(int value);
const Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_NewIndexRequest;
const Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_RecvRequest;
const int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor();
inline const ::std::string& Request_RequestType_Name(Request_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_RequestType_descriptor(), value);
}
inline bool Request_RequestType_Parse(
    const ::std::string& name, Request_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static const RequestType NewIndexRequest = Request_RequestType_NewIndexRequest;
  static const RequestType AddRequest = Request_RequestType_AddRequest;
  static const RequestType SendRequest = Request_RequestType_SendRequest;
  static const RequestType RecvRequest = Request_RequestType_RecvRequest;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return Request_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .p2pnetS.Request.RequestType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::p2pnetS::Request_RequestType type() const;
  inline void set_type(::p2pnetS::Request_RequestType value);

  // required string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required uint64 tensor_id = 3;
  inline bool has_tensor_id() const;
  inline void clear_tensor_id();
  static const int kTensorIdFieldNumber = 3;
  inline ::google::protobuf::uint64 tensor_id() const;
  inline void set_tensor_id(::google::protobuf::uint64 value);

  // required uint64 buffer = 4;
  inline bool has_buffer() const;
  inline void clear_buffer();
  static const int kBufferFieldNumber = 4;
  inline ::google::protobuf::uint64 buffer() const;
  inline void set_buffer(::google::protobuf::uint64 value);

  // required uint64 buffer_size = 5;
  inline bool has_buffer_size() const;
  inline void clear_buffer_size();
  static const int kBufferSizeFieldNumber = 5;
  inline ::google::protobuf::uint64 buffer_size() const;
  inline void set_buffer_size(::google::protobuf::uint64 value);

  // repeated uint64 ndptrs = 6;
  inline int ndptrs_size() const;
  inline void clear_ndptrs();
  static const int kNdptrsFieldNumber = 6;
  inline ::google::protobuf::uint64 ndptrs(int index) const;
  inline void set_ndptrs(int index, ::google::protobuf::uint64 value);
  inline void add_ndptrs(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ndptrs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ndptrs();

  // required uint64 on_complete = 7;
  inline bool has_on_complete() const;
  inline void clear_on_complete();
  static const int kOnCompleteFieldNumber = 7;
  inline ::google::protobuf::uint64 on_complete() const;
  inline void set_on_complete(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:p2pnetS.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_tensor_id();
  inline void clear_has_tensor_id();
  inline void set_has_buffer();
  inline void clear_has_buffer();
  inline void set_has_buffer_size();
  inline void clear_has_buffer_size();
  inline void set_has_on_complete();
  inline void clear_has_on_complete();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* address_;
  ::google::protobuf::uint64 tensor_id_;
  ::google::protobuf::uint64 buffer_;
  ::google::protobuf::uint64 buffer_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ndptrs_;
  ::google::protobuf::uint64 on_complete_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_p2pnet_2eproto();
  friend void protobuf_AssignDesc_p2pnet_2eproto();
  friend void protobuf_ShutdownFile_p2pnet_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required .p2pnetS.Request.RequestType type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::p2pnetS::Request_RequestType Request::type() const {
  return static_cast< ::p2pnetS::Request_RequestType >(type_);
}
inline void Request::set_type(::p2pnetS::Request_RequestType value) {
  assert(::p2pnetS::Request_RequestType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string address = 2;
inline bool Request::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& Request::address() const {
  return *address_;
}
inline void Request::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Request::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void Request::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* Request::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 tensor_id = 3;
inline bool Request::has_tensor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_tensor_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_tensor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_tensor_id() {
  tensor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tensor_id();
}
inline ::google::protobuf::uint64 Request::tensor_id() const {
  return tensor_id_;
}
inline void Request::set_tensor_id(::google::protobuf::uint64 value) {
  set_has_tensor_id();
  tensor_id_ = value;
}

// required uint64 buffer = 4;
inline bool Request::has_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_buffer() {
  buffer_ = GOOGLE_ULONGLONG(0);
  clear_has_buffer();
}
inline ::google::protobuf::uint64 Request::buffer() const {
  return buffer_;
}
inline void Request::set_buffer(::google::protobuf::uint64 value) {
  set_has_buffer();
  buffer_ = value;
}

// required uint64 buffer_size = 5;
inline bool Request::has_buffer_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_buffer_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_buffer_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_buffer_size() {
  buffer_size_ = GOOGLE_ULONGLONG(0);
  clear_has_buffer_size();
}
inline ::google::protobuf::uint64 Request::buffer_size() const {
  return buffer_size_;
}
inline void Request::set_buffer_size(::google::protobuf::uint64 value) {
  set_has_buffer_size();
  buffer_size_ = value;
}

// repeated uint64 ndptrs = 6;
inline int Request::ndptrs_size() const {
  return ndptrs_.size();
}
inline void Request::clear_ndptrs() {
  ndptrs_.Clear();
}
inline ::google::protobuf::uint64 Request::ndptrs(int index) const {
  return ndptrs_.Get(index);
}
inline void Request::set_ndptrs(int index, ::google::protobuf::uint64 value) {
  ndptrs_.Set(index, value);
}
inline void Request::add_ndptrs(::google::protobuf::uint64 value) {
  ndptrs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Request::ndptrs() const {
  return ndptrs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Request::mutable_ndptrs() {
  return &ndptrs_;
}

// required uint64 on_complete = 7;
inline bool Request::has_on_complete() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_on_complete() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_on_complete() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_on_complete() {
  on_complete_ = GOOGLE_ULONGLONG(0);
  clear_has_on_complete();
}
inline ::google::protobuf::uint64 Request::on_complete() const {
  return on_complete_;
}
inline void Request::set_on_complete(::google::protobuf::uint64 value) {
  set_has_on_complete();
  on_complete_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace p2pnetS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::p2pnetS::Request_RequestType>() {
  return ::p2pnetS::Request_RequestType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_p2pnet_2eproto__INCLUDED
